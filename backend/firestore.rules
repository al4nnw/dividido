rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the request is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to get the user's UID
    function getUserId() {
      return request.auth.uid;
    }

    match /users/{userId} {
      allow read: if request.auth != null;  // Allow authenticated users to read
      allow write: if request.auth.uid == userId;  // Allow users to write their own data
    }

    match /groups/{groupId} {

      // Allow group creation if the user is authenticated and 'meta.createdBy' matches their UID
      allow create: if isAuthenticated() &&
                    request.resource.data.meta.createdBy == getUserId();

      // Allow reading the group if the user is a member
      allow read: if isAuthenticated() &&
                  resource.data.memberIds.hasAny([getUserId()]);

      // Allow updating the group if the user is the creator and 'meta' fields are unchanged
      allow update: if isAuthenticated() &&
                    resource.data.meta.createdBy == getUserId() &&
                    request.resource.data.meta == resource.data.meta;

      // Allow deleting the group if the user is the creator
      allow delete: if isAuthenticated() && resource.data.meta.createdBy == getUserId();

      // Subcollection for expenses
      match /expenses/{expenseId} {

        // Allow group members to create expenses
        allow create: if isAuthenticated() &&
                      resource.parent.parent.data.memberIds.hasAny([getUserId()]) &&
                      request.resource.data.meta.createdBy == getUserId();

        // Allow group members to read expenses
        allow read: if isAuthenticated() &&
                    resource.parent.parent.data.memberIds.hasAny([getUserId()]);

        // Allow the expense creator to update the expense
        allow update: if isAuthenticated() &&
                      resource.parent.parent.data.memberIds.hasAny([getUserId()]) &&
                      request.resource.data.meta == resource.data.meta;

        // Allow the expense creator to delete the expense
        allow delete: if isAuthenticated() &&
                      resource.parent.parent.data.memberIds.hasAny([getUserId()]) &&
                      resource.data.meta.createdBy == getUserId();
      }
    }
  }
}
